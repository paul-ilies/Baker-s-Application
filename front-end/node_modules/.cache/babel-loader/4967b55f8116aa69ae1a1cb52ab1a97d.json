{"ast":null,"code":"var _jsxFileName = \"D:\\\\Baker-s-Application\\\\front-end\\\\src\\\\context\\\\ContextCalculator.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useContext, useReducer } from 'react';\nimport { CalcReducer } from '../reducer/ReducerCalculator'; //creare obiect contextual\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CalcContext = /*#__PURE__*/React.createContext(); //definire valori implicite\n\nconst defaultState = {\n  Flour: 0,\n  Water: 0,\n  Salt: 0,\n  Yeast: 0,\n  Hidration: 0\n};\nexport const CalcProvider = ({\n  children\n}) => {\n  _s();\n\n  const [state, dispatch] = useReducer(CalcReducer, defaultState); //functie ce preia valorile inserate de catre utilizator\n\n  const onChange = e => {\n    dispatch({\n      type: \"GET_QUANTITY\",\n      payload: e\n    });\n  }; // functie ce reseteaza valorile la cele implicite\n\n\n  const resetHandle = () => {\n    dispatch({\n      type: \"RESET_FIELDS\",\n      payload: defaultState\n    });\n  }; //returnare\n\n\n  return /*#__PURE__*/_jsxDEV(CalcContext.Provider, {\n    value: {\n      onChange,\n      resetHandle,\n      state\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}; //customizare functie fara necesitatea importarii useContext() in componente\n\n_s(CalcProvider, \"zEDbosDjpARfUl0vNel/+uYp9FA=\");\n\n_c = CalcProvider;\nexport const useCalcGlobalContext = () => {\n  _s2();\n\n  return useContext(CalcContext);\n};\n\n_s2(useCalcGlobalContext, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"CalcProvider\");","map":{"version":3,"sources":["D:/Baker-s-Application/front-end/src/context/ContextCalculator.js"],"names":["React","useContext","useReducer","CalcReducer","CalcContext","createContext","defaultState","Flour","Water","Salt","Yeast","Hidration","CalcProvider","children","state","dispatch","onChange","e","type","payload","resetHandle","useCalcGlobalContext"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,UAA5B,QAA8C,OAA9C;AACA,SAASC,WAAT,QAA4B,8BAA5B,C,CAEA;;;AACA,MAAMC,WAAW,gBAAGJ,KAAK,CAACK,aAAN,EAApB,C,CAEA;;AACA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,CADU;AAEjBC,EAAAA,KAAK,EAAE,CAFU;AAGjBC,EAAAA,IAAI,EAAE,CAHW;AAIjBC,EAAAA,KAAK,EAAE,CAJU;AAKjBC,EAAAA,SAAS,EAAE;AALM,CAArB;AAQA,OAAO,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAAA;;AAE1C,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBb,UAAU,CAACC,WAAD,EAAcG,YAAd,CAApC,CAF0C,CAI1C;;AACA,QAAMU,QAAQ,GAAIC,CAAD,IAAO;AACpBF,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,cAAR;AAAwBC,MAAAA,OAAO,EAAEF;AAAjC,KAAD,CAAR;AACH,GAFD,CAL0C,CAQ1C;;;AACA,QAAMG,WAAW,GAAG,MAAM;AACtBL,IAAAA,QAAQ,CAAC;AAAEG,MAAAA,IAAI,EAAE,cAAR;AAAwBC,MAAAA,OAAO,EAAEb;AAAjC,KAAD,CAAR;AACH,GAFD,CAT0C,CAY1C;;;AACA,sBACI,QAAC,WAAD,CAAa,QAAb;AACI,IAAA,KAAK,EAAE;AAAEU,MAAAA,QAAF;AAAYI,MAAAA,WAAZ;AAAyBN,MAAAA;AAAzB,KADX;AAAA,cAEKD;AAFL;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAnBM,C,CAoBP;;GApBaD,Y;;KAAAA,Y;AAqBb,OAAO,MAAMS,oBAAoB,GAAG,MAAM;AAAA;;AACtC,SAAOpB,UAAU,CAACG,WAAD,CAAjB;AACH,CAFM;;IAAMiB,oB","sourcesContent":["import React, { useContext, useReducer } from 'react';\r\nimport { CalcReducer } from '../reducer/ReducerCalculator'\r\n\r\n//creare obiect contextual\r\nconst CalcContext = React.createContext();\r\n\r\n//definire valori implicite\r\nconst defaultState = {\r\n    Flour: 0,\r\n    Water: 0,\r\n    Salt: 0,\r\n    Yeast: 0,\r\n    Hidration: 0,\r\n}\r\n\r\nexport const CalcProvider = ({ children }) => {\r\n\r\n    const [state, dispatch] = useReducer(CalcReducer, defaultState)\r\n\r\n    //functie ce preia valorile inserate de catre utilizator\r\n    const onChange = (e) => {\r\n        dispatch({ type: \"GET_QUANTITY\", payload: e })\r\n    }\r\n    // functie ce reseteaza valorile la cele implicite\r\n    const resetHandle = () => {\r\n        dispatch({ type: \"RESET_FIELDS\", payload: defaultState })\r\n    }\r\n    //returnare\r\n    return (\r\n        <CalcContext.Provider\r\n            value={{ onChange, resetHandle, state }}>\r\n            {children}\r\n        </CalcContext.Provider>\r\n    )\r\n}\r\n//customizare functie fara necesitatea importarii useContext() in componente\r\nexport const useCalcGlobalContext = () => {\r\n    return useContext(CalcContext)\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}